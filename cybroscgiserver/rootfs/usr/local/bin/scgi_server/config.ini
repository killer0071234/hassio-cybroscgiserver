[ETH]
; controllers connected via ethernet
enabled = true

; port used for communication with controllers
port = 8442

; ip address of network adapter used for communication with controllers, leave empty to bind to all adapters
bind_address =

; broadcast address used to autodetect controller ip address, leave empty to select adapter automatically
autodetect_enabled = true
autodetect_address =

; cybro sockets used to send events
; each socket consists of a socket id (1..255) and a list of variables, sorted by type
; variables of the same type are separated by comma, between the types is semicolon
socket = 1; socket_req, my_bit0, my_bit1; my_int0, my_int1; my_long0, my_long1
socket = 100; socket_req; event_data;

[CAN]
; controller connected via CAN bus (Raspberry Pi + PiCAN2)
enabled = false
channel = can0
interface = socketcan_native
bitrate = 100000

[PUSH]
; server that receive and acknowledge push messages sent by controllers
; used to open the UDP channel through which the server can communicate with controllers
enabled = false

; time to delete controller from the list, after it stopped sending push messages [hours]
timeout_h = 24

[ABUS]
; time to resend the message when no reply is received [ms]
timeout_ms = 200

; number of retries before error is reported
number_of_retries = 3

; controller a-bus password, leave empty when protection level is set to unrestricted
password =

[CACHE]
; time after which cache is invalidated and data is read from the controller [s], 0 to disable cache
valid_period_s = 0

; time after which data is still read from the cache, but a new read is sent to refresh the cache [s], 0 to disable refresh
request_period_s = 0

; time to periodically remove expired cache items [s], 0 to disable cleanup
cleanup_period_s = 0

; static ip address, use only when autodetect can't reach the controller
; [c20000]
; ip = 192.168.1.100
; port = 8442
; password =

[SCGI]
; ip address of network adapter used for scgi requests, leave empty for default adapter
bind_address =

; address used by clients to connect to scgi server, set to localhost for local machine
server_address = localhost

; port used as listener for scgi requests
port = 4000

; maximum time allowed for scgi reply [s]
timeout_s = 5

; maximum request size [bytes]
max_frame_bytes = 1000

; limit access only to variables that are in the plc program marked as 'user'
only_user_variables = true

; include variable descriptions in xml response, disable when processing speed is critical
reply_with_descriptions = true

; rate at which the server sends ping messages to the client, in order to keep the connection open [seconds]
keepalive = 20

; enable encryption for all scgi requests (https instead of http)
tls_enabled = false
; token = PWFChKsSB4DJoe4WC09hBaOKRDq47hMYpFqfFyHda35TdRo3yOTGAWPmWjuOry47

[ALIAS]
; give each controller an alternate name, e.g. c20000.first_scan -> alpha.first_scan
; use alphanumeric characters and underscore, no national characters, not case sensitive
; c20000 = alpha

[DBASE]
; data logger settings
host = localhost
port = 3306
name = cybro
user = root
password = root
max_query_size = 100000

[MQTT]
; mqtt client settings
; broker location and credentials, set to localhost for the local machine
ip = localhost
port = 1883
username =
password =

; unique client identifier
client_id = cybrotech

; mqtt protocol version, set the one supported by the broker (3-v31, 4-v311, 5-v5)
version = 4

; rate at which the client sends ping messages to the broker, in order to keep the connection open [seconds]
keepalive = 30

; quality of service, same value used for all transactions (0-send once, 1-send and confirm, 2-exactly once)
quality = 1

; last will and testament, message that will be sent to clients when publisher loses connection
; = mqtt topic, message content
lwt = myhome/will, disconnected

; enable encryption to make client to broker connection secure
tls_enabled = false

[PUBLISHER]
; cybro variables that will be published to mqtt subscribers
; = cybro variable, mqtt topic, read period in seconds (0..3600), on-change (optional)

; periodically read from controller, publish on MQTT when response is received
var = c20000.cybro_temperature, myhome/system/temperature, 10

; periodically read from controller, publish on MQTT when value is changed
var = c20000.cybro_temperature, myhome/system/temperature, 10, on-change

; no periodic reading, publish on MQTT when event is received
var = c20000.event_data, myhome/events, 0, on-change

[SUBSCRIBER]
; mqtt topics that are written to cybro variables
; = cybro variable, mqtt topic
var = c20000.cybro_qx00, myhome/livingroom/output

[DEBUGLOG]
; available verbose levels: CRITICAL, ERROR, WARNING, INFO, DEBUG
enabled = true
verbose_level = ERROR
log_to_file = true
max_file_size_kb = 1024
max_backup_count = 5

[LOCATIONS]
; location where temporary files are stored, relative to application directory
log_dir = log
alc_dir = alc